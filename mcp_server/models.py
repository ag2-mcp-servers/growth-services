# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:36:32+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional
from uuid import UUID

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Method(Enum):
    icueMLP = 'icueMLP'
    icueMLO = 'icueMLO'
    icueMLN = 'icueMLN'


class EntityResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    address: Optional[str] = None
    dbConnection: Optional[str] = None
    email: Optional[str] = None
    id: Optional[int] = None
    isActive: Optional[bool] = None
    name: Optional[str] = None
    token: Optional[UUID] = None


class ErrorType(Enum):
    MeanAbsolutePercentageError = 'MeanAbsolutePercentageError'
    MeanSquaredError = 'MeanSquaredError'
    MeanAbsoluteError = 'MeanAbsoluteError'
    MedianAbsoluteDeviation = 'MedianAbsoluteDeviation'
    None_ = 'None'


class ForecastHyperparameterResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    discardData: Optional[bool] = Field(None, examples=[False])
    errorType: Optional[ErrorType] = Field(
        None, examples=['MeanAbsolutePercentageError']
    )
    holdOutPeriod: Optional[int] = Field(None, examples=[4])
    noFcst: Optional[int] = Field(None, examples=[18])
    periodicity: Optional[int] = Field(None, examples=[12])


class ForecastOptimalParametersResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    alpha: Optional[float] = None
    beta: Optional[float] = None
    gamma: Optional[float] = None


class ForecastPerformanceDataRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    forecastValues: Optional[List[float]] = None
    historyValues: Optional[List[float]] = None
    timeSeriesId: Optional[str] = None


class HyperparameterModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    abcClassificationThresholdA: Optional[float] = Field(None, examples=[0.8])
    abcClassificationThresholdB: Optional[float] = Field(None, examples=[0.95])
    abcClassificationThresholdC: Optional[float] = Field(None, examples=[0.95])
    discardData: Optional[bool] = Field(None, examples=[False])
    errorType: Optional[ErrorType] = Field(
        None, examples=['MeanAbsolutePercentageError']
    )
    holdOutPeriod: Optional[int] = Field(None, examples=[4])
    noFcst: Optional[int] = Field(None, examples=[18])
    outlierDetection: Optional[bool] = Field(None, examples=[True])
    periodicity: Optional[int] = Field(None, examples=[12])
    xyzClassificationThresholdX: Optional[float] = Field(None, examples=[0.3])
    xyzClassificationThresholdY: Optional[float] = Field(None, examples=[0.6])
    xyzClassificationThresholdZ: Optional[float] = Field(None, examples=[0.6])


class JobResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    jobId: Optional[int] = None


class MethodDto(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: Optional[str] = None
    name: Optional[str] = None
    queue: Optional[str] = None
    replyQueue: Optional[str] = None


class NewEntityRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    address: Optional[str] = None
    email: Optional[str] = None
    name: Optional[str] = None


class NewModelRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: Optional[str] = None
    name: Optional[str] = None


class NewTokenRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    entityToken: Optional[UUID] = None
    expirationDate: Optional[datetime] = None
    userToken: Optional[UUID] = None


class NewUserRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    email: Optional[str] = None
    entityToken: Optional[UUID] = None
    firstname: Optional[str] = None
    isActive: Optional[bool] = None
    lastname: Optional[str] = None
    phone: Optional[str] = None


class Type(Enum):
    Additive = 'Additive'
    LevelShift = 'LevelShift'
    TemporaryChange = 'TemporaryChange'
    Seasonal = 'Seasonal'


class OutlierResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    index: Optional[int] = None
    type: Optional[Type] = None
    value: Optional[float] = None


class PlanningLevelDataDto(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    historyValues: Optional[List[float]] = None
    timeSeriesId: Optional[str] = None


class PlanningLevelForecastResultData(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    date: Optional[str] = None
    value: Optional[float] = None


class PlanningLevelInfoRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    discardData: bool = Field(..., examples=[False])
    errorType: ErrorType = Field(..., examples=['MeanAbsolutePercentageError'])
    holdOutPeriod: int = Field(..., examples=[4])
    noFcst: int = Field(..., examples=[18])
    outlierDetection: bool = Field(..., examples=[True])
    periodicity: int = Field(..., examples=[12])


class PlanningLevelReRunRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    method: str = Field(..., examples=['iCUE1'])
    params: Optional[PlanningLevelInfoRequest] = None
    planningLevelId: int


class PlanningLevelRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    data: Optional[List[PlanningLevelDataDto]] = None
    method: str = Field(..., examples=['iCUE1'])
    override: Optional[bool] = Field(None, examples=[False])
    params: Optional[PlanningLevelInfoRequest] = None
    planningLevelId: str
    startDate: str = Field(..., examples=['1/16/2016'])


class PortfolioAbcModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    abc12: Optional[str] = None
    abc12Value: Optional[float] = None
    abc6: Optional[str] = None
    abc6Value: Optional[float] = None
    abc9: Optional[str] = None
    abc9Value: Optional[float] = None
    id: Optional[str] = None
    thresholdA: Optional[float] = None
    thresholdB: Optional[float] = None
    thresholdC: Optional[float] = None


class PortfolioModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    abc12: Optional[str] = None
    abc12Value: Optional[float] = None
    abc6: Optional[str] = None
    abc6Value: Optional[float] = None
    abc9: Optional[str] = None
    abc9Value: Optional[float] = None
    id: Optional[str] = None
    thresholdA: Optional[float] = None
    thresholdB: Optional[float] = None
    thresholdC: Optional[float] = None
    thresholdX: Optional[float] = None
    thresholdY: Optional[float] = None
    thresholdZ: Optional[float] = None
    xyz12: Optional[str] = None
    xyz12Value: Optional[float] = None
    xyz6: Optional[str] = None
    xyz6Value: Optional[float] = None
    xyz9: Optional[str] = None
    xyz9Value: Optional[float] = None


class PortfolioRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    data: Optional[List[PlanningLevelDataDto]] = None
    planningLevelId: str
    startDate: str = Field(..., examples=['1/16/2016'])


class PortfolioXyzModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[str] = None
    thresholdX: Optional[float] = None
    thresholdY: Optional[float] = None
    thresholdZ: Optional[float] = None
    xyz12: Optional[str] = None
    xyz12Value: Optional[float] = None
    xyz6: Optional[str] = None
    xyz6Value: Optional[float] = None
    xyz9: Optional[str] = None
    xyz9Value: Optional[float] = None


class RewindHyperparameterResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    costOfError: Optional[float] = Field(None, examples=[200])
    discardData: Optional[bool] = Field(None, examples=[False])
    errorType: Optional[ErrorType] = Field(
        None, examples=['MeanAbsolutePercentageError']
    )
    holdOutPeriod: Optional[int] = Field(None, examples=[4])
    noFcst: Optional[int] = Field(None, examples=[18])
    periodicity: Optional[int] = Field(None, examples=[12])
    rewindTimeFrame: Optional[int] = Field(None, examples=[12])


class RewindTimeSeriesResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    customerError: Optional[float] = None
    errorDiff: Optional[float] = None
    icueError: Optional[float] = None
    timeSeries: Optional[str] = None
    totalCost: Optional[float] = None
    useIcue: Optional[bool] = None


class TimeSeriesForecastResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    error: Optional[float] = None
    forecastData: Optional[List[PlanningLevelForecastResultData]] = None
    method: Optional[str] = None
    timeSeriesId: Optional[str] = None


class TimeSeriesFullDetailsResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    error: Optional[float] = None
    forecastData: Optional[List[PlanningLevelForecastResultData]] = None
    historyData: Optional[List[PlanningLevelForecastResultData]] = None
    method: Optional[str] = None
    optimalParameters: Optional[ForecastOptimalParametersResponse] = None
    outliers: Optional[List[OutlierResponse]] = None
    timeSeriesId: Optional[str] = None


class TimeSeriesHistoryAndForecastResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    error: Optional[float] = None
    forecastData: Optional[List[PlanningLevelForecastResultData]] = None
    historyData: Optional[List[PlanningLevelForecastResultData]] = None
    method: Optional[str] = None
    timeSeriesId: Optional[str] = None


class TimeSeriesOptimalParametersResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    method: Optional[str] = None
    optimalParameters: Optional[ForecastOptimalParametersResponse] = None
    timeSeriesId: Optional[str] = None


class TimeSeriesOutliersResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    outliers: Optional[List[OutlierResponse]] = None
    timeSeriesId: Optional[str] = None


class ToggleRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[int] = None
    isActive: Optional[bool] = None


class ToggleUserRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    entityId: Optional[int] = None
    id: Optional[int] = None
    isActive: Optional[bool] = None


class AdministrationEntityGetResponse(RootModel[List[EntityResponse]]):
    root: List[EntityResponse]


class AdministrationFileToJsonPostRequest(BaseModel):
    File: bytes
    Periodicity: int


class AdministrationModelGetResponse(RootModel[List[MethodDto]]):
    root: List[MethodDto]


class AdministrationModelEntityIdGetResponse(RootModel[List[MethodDto]]):
    root: List[MethodDto]


class Method1(Enum):
    AutoBestPick = 'AutoBestPick'
    BoxJenkins = 'BoxJenkins'
    Croston = 'Croston'
    DoubleExponentialSmoothing = 'DoubleExponentialSmoothing'
    HoltWinters = 'HoltWinters'
    SingleExponentialSmoothing = 'SingleExponentialSmoothing'
    iCUE1 = 'iCUE1'
    SimpleMovingAverage = 'SimpleMovingAverage'


class ForecastFileToForecastPostRequest(BaseModel):
    DiscardData: Optional[bool] = None
    ErrorType_1: Optional[ErrorType] = Field(None, alias='ErrorType')
    File: bytes
    HoldOutPeriod: Optional[int] = None
    Method: Method1 = Field(..., examples=['iCUE1'])
    NoFcst: Optional[int] = None
    OutlierDetection: Optional[bool] = None
    Periodicity: Optional[int] = None


class OutlierPostResponse(RootModel[List[TimeSeriesOutliersResponse]]):
    root: List[TimeSeriesOutliersResponse]


class PortfolioPostResponse(RootModel[List[PortfolioModel]]):
    root: List[PortfolioModel]


class PortfolioAbcPostResponse(RootModel[List[PortfolioAbcModel]]):
    root: List[PortfolioAbcModel]


class PortfolioFileToPortfolioPostRequest(BaseModel):
    File: bytes


class PortfolioXyzPostResponse(RootModel[List[PortfolioXyzModel]]):
    root: List[PortfolioXyzModel]


class ReportPerformanceSkuRationalizationPlanningLevelIdGetResponse(
    RootModel[List[PortfolioModel]]
):
    root: List[PortfolioModel]


class AiPlanningLevelRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    data: Optional[List[PlanningLevelDataDto]] = None
    method: Method = Field(..., examples=['icueMLP | icueMLO'])
    params: Optional[PlanningLevelInfoRequest] = None
    planningLevelId: str
    startDate: str = Field(..., examples=['1/16/2016'])


class ForecastBottomUpResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    forecastData: Optional[List[PlanningLevelForecastResultData]] = None
    hyperparameters: Optional[ForecastHyperparameterResponse] = None


class ForecastPerformanceRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    costOfError: Optional[float] = Field(None, examples=[200])
    data: Optional[List[ForecastPerformanceDataRequest]] = None
    method: str = Field(..., examples=['iCUE1'])
    params: Optional[PlanningLevelInfoRequest] = None
    planningLevelId: str
    rewindTimeFrame: int = Field(..., examples=[12])
    startDate: str = Field(..., examples=['1/16/2016'])


class ForecastResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hyperparameters: Optional[ForecastHyperparameterResponse] = None
    timeSeries: Optional[List[TimeSeriesForecastResponse]] = None


class FullDetailsForecastResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hyperparameters: Optional[ForecastHyperparameterResponse] = None
    timeSeries: Optional[List[TimeSeriesFullDetailsResponse]] = None


class HistoryAndForecastResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hyperparameters: Optional[ForecastHyperparameterResponse] = None
    timeSeries: Optional[List[TimeSeriesHistoryAndForecastResponse]] = None


class JsonForecastResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    data: Optional[List[PlanningLevelDataDto]] = None
    planningLevelId: Optional[str] = None
    startDate: Optional[str] = Field(None, examples=['1/16/2016'])


class LifecycleManyToOneRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    data: Optional[List[PlanningLevelDataDto]] = None
    planningLevelId: str
    ratios: Optional[List[float]] = None


class LifecycleOneToOneRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    data: Optional[PlanningLevelDataDto] = None
    planningLevelId: str
    ratio: Optional[float] = Field(None, examples=[15])


class OptimalParameterResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hyperparameters: Optional[ForecastHyperparameterResponse] = None
    timeSeries: Optional[List[TimeSeriesOptimalParametersResponse]] = None


class OutliersRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    data: Optional[List[PlanningLevelDataDto]] = None
    planningLevelId: str
    startDate: str = Field(..., examples=['1/16/2016'])


class RewindResponse(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hyperparameters: Optional[RewindHyperparameterResponse] = None
    timeSeries: Optional[List[RewindTimeSeriesResponse]] = None
    totalCost: Optional[float] = None
